pipeline {
    agent {
        docker {
            image 'node:20-alpine'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE = "chauhanshreyash18/devsecops-integrated-ci-cd-pipeline:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        SNYK_TOKEN = credentials('snyk-token')
        K8S_DEPLOYMENT_PATH = "kubernetes/deployment.yml"
        GITHUB_TOKEN = credentials('github-token')
        GIT_REPO_NAME = "devsecops-integrated-ci-cd-pipeline"
        GIT_USER_NAME = "shreyash81"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/shreyash81/devsecOps-integrated-ci-cd-pipeline.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }
        stage('Install Sonar Scanner') {
            steps {
                sh 'npm install -g sonar-scanner' // global install
            }
        }

        stage('Test') {
            steps {
                sh 'npm test || echo "No tests found"'
            }
        }

        stage('Snyk Scan') {
            steps {
                sh 'npx snyk auth $SNYK_TOKEN'
                sh 'npx snyk test'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }
       stage('Static Code Analysis') {
            steps {
              withCredentials([
                  string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN'),
                  string(credentialsId: 'sonarqube-url', variable: 'SONAR_URL')
        ]) {
            sh '''
                sonar-scanner \
                -Dsonar.projectKey=devsecops-integrated-ci-cd-pipeline \
                -Dsonar.sources=./src \
                -Dsonar.host.url=$SONAR_URL \
                -Dsonar.login=$SONAR_TOKEN
            '''
        }
    }
}




        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Trivy Scan Docker Image') {
            steps {
                sh '''
                docker run --rm aquasec/trivy image --severity CRITICAL,HIGH --ignore-unfixed $DOCKER_IMAGE
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        sh 'docker push $DOCKER_IMAGE'
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                sh '''
                    git config user.email "shreyash.xyz@gmail.com"
                    git config user.name "Shreyash Singh"
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" ${K8S_DEPLOYMENT_PATH}
                    git add ${K8S_DEPLOYMENT_PATH}
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                '''
            }
        }
    }
}






